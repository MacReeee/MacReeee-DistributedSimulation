// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0
// source: hotstuff/pb/proto/hostuff.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Hotstuff_Propose_FullMethodName       = "/pb.hotstuff/Propose"
	Hotstuff_VotePrepare_FullMethodName   = "/pb.hotstuff/VotePrepare"
	Hotstuff_VotePreCommit_FullMethodName = "/pb.hotstuff/VotePreCommit"
	Hotstuff_VoteCommit_FullMethodName    = "/pb.hotstuff/VoteCommit"
	Hotstuff_PreCommit_FullMethodName     = "/pb.hotstuff/PreCommit"
	Hotstuff_Commit_FullMethodName        = "/pb.hotstuff/Commit"
	Hotstuff_Decide_FullMethodName        = "/pb.hotstuff/Decide"
	Hotstuff_NewView_FullMethodName       = "/pb.hotstuff/NewView"
	Hotstuff_Timeout_FullMethodName       = "/pb.hotstuff/Timeout"
	Hotstuff_Debug_FullMethodName         = "/pb.hotstuff/Debug"
)

// HotstuffClient is the client API for Hotstuff service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HotstuffClient interface {
	Propose(ctx context.Context, in *Proposal, opts ...grpc.CallOption) (*VoteRequest, error)
	VotePrepare(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*Precommit, error)
	VotePreCommit(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*CommitMsg, error)
	VoteCommit(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*DecideMsg, error)
	PreCommit(ctx context.Context, in *Precommit, opts ...grpc.CallOption) (*VoteRequest, error)
	Commit(ctx context.Context, in *CommitMsg, opts ...grpc.CallOption) (*VoteRequest, error)
	Decide(ctx context.Context, in *DecideMsg, opts ...grpc.CallOption) (*NewViewMsg, error)
	NewView(ctx context.Context, in *NewViewMsg, opts ...grpc.CallOption) (*Proposal, error)
	Timeout(ctx context.Context, in *TimeoutMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// rpc Sync(SyncRequest) returns (SyncResponse);
	Debug(ctx context.Context, in *DebugMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type hotstuffClient struct {
	cc grpc.ClientConnInterface
}

func NewHotstuffClient(cc grpc.ClientConnInterface) HotstuffClient {
	return &hotstuffClient{cc}
}

func (c *hotstuffClient) Propose(ctx context.Context, in *Proposal, opts ...grpc.CallOption) (*VoteRequest, error) {
	out := new(VoteRequest)
	err := c.cc.Invoke(ctx, Hotstuff_Propose_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotstuffClient) VotePrepare(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*Precommit, error) {
	out := new(Precommit)
	err := c.cc.Invoke(ctx, Hotstuff_VotePrepare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotstuffClient) VotePreCommit(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*CommitMsg, error) {
	out := new(CommitMsg)
	err := c.cc.Invoke(ctx, Hotstuff_VotePreCommit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotstuffClient) VoteCommit(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*DecideMsg, error) {
	out := new(DecideMsg)
	err := c.cc.Invoke(ctx, Hotstuff_VoteCommit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotstuffClient) PreCommit(ctx context.Context, in *Precommit, opts ...grpc.CallOption) (*VoteRequest, error) {
	out := new(VoteRequest)
	err := c.cc.Invoke(ctx, Hotstuff_PreCommit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotstuffClient) Commit(ctx context.Context, in *CommitMsg, opts ...grpc.CallOption) (*VoteRequest, error) {
	out := new(VoteRequest)
	err := c.cc.Invoke(ctx, Hotstuff_Commit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotstuffClient) Decide(ctx context.Context, in *DecideMsg, opts ...grpc.CallOption) (*NewViewMsg, error) {
	out := new(NewViewMsg)
	err := c.cc.Invoke(ctx, Hotstuff_Decide_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotstuffClient) NewView(ctx context.Context, in *NewViewMsg, opts ...grpc.CallOption) (*Proposal, error) {
	out := new(Proposal)
	err := c.cc.Invoke(ctx, Hotstuff_NewView_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotstuffClient) Timeout(ctx context.Context, in *TimeoutMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Hotstuff_Timeout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotstuffClient) Debug(ctx context.Context, in *DebugMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Hotstuff_Debug_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HotstuffServer is the server API for Hotstuff service.
// All implementations must embed UnimplementedHotstuffServer
// for forward compatibility
type HotstuffServer interface {
	Propose(context.Context, *Proposal) (*VoteRequest, error)
	VotePrepare(context.Context, *VoteRequest) (*Precommit, error)
	VotePreCommit(context.Context, *VoteRequest) (*CommitMsg, error)
	VoteCommit(context.Context, *VoteRequest) (*DecideMsg, error)
	PreCommit(context.Context, *Precommit) (*VoteRequest, error)
	Commit(context.Context, *CommitMsg) (*VoteRequest, error)
	Decide(context.Context, *DecideMsg) (*NewViewMsg, error)
	NewView(context.Context, *NewViewMsg) (*Proposal, error)
	Timeout(context.Context, *TimeoutMsg) (*emptypb.Empty, error)
	// rpc Sync(SyncRequest) returns (SyncResponse);
	Debug(context.Context, *DebugMsg) (*emptypb.Empty, error)
	mustEmbedUnimplementedHotstuffServer()
}

// UnimplementedHotstuffServer must be embedded to have forward compatible implementations.
type UnimplementedHotstuffServer struct {
}

func (UnimplementedHotstuffServer) Propose(context.Context, *Proposal) (*VoteRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Propose not implemented")
}
func (UnimplementedHotstuffServer) VotePrepare(context.Context, *VoteRequest) (*Precommit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePrepare not implemented")
}
func (UnimplementedHotstuffServer) VotePreCommit(context.Context, *VoteRequest) (*CommitMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePreCommit not implemented")
}
func (UnimplementedHotstuffServer) VoteCommit(context.Context, *VoteRequest) (*DecideMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteCommit not implemented")
}
func (UnimplementedHotstuffServer) PreCommit(context.Context, *Precommit) (*VoteRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreCommit not implemented")
}
func (UnimplementedHotstuffServer) Commit(context.Context, *CommitMsg) (*VoteRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedHotstuffServer) Decide(context.Context, *DecideMsg) (*NewViewMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decide not implemented")
}
func (UnimplementedHotstuffServer) NewView(context.Context, *NewViewMsg) (*Proposal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewView not implemented")
}
func (UnimplementedHotstuffServer) Timeout(context.Context, *TimeoutMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Timeout not implemented")
}
func (UnimplementedHotstuffServer) Debug(context.Context, *DebugMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Debug not implemented")
}
func (UnimplementedHotstuffServer) mustEmbedUnimplementedHotstuffServer() {}

// UnsafeHotstuffServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HotstuffServer will
// result in compilation errors.
type UnsafeHotstuffServer interface {
	mustEmbedUnimplementedHotstuffServer()
}

func RegisterHotstuffServer(s grpc.ServiceRegistrar, srv HotstuffServer) {
	s.RegisterService(&Hotstuff_ServiceDesc, srv)
}

func _Hotstuff_Propose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Proposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotstuffServer).Propose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hotstuff_Propose_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotstuffServer).Propose(ctx, req.(*Proposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotstuff_VotePrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotstuffServer).VotePrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hotstuff_VotePrepare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotstuffServer).VotePrepare(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotstuff_VotePreCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotstuffServer).VotePreCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hotstuff_VotePreCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotstuffServer).VotePreCommit(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotstuff_VoteCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotstuffServer).VoteCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hotstuff_VoteCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotstuffServer).VoteCommit(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotstuff_PreCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Precommit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotstuffServer).PreCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hotstuff_PreCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotstuffServer).PreCommit(ctx, req.(*Precommit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotstuff_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotstuffServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hotstuff_Commit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotstuffServer).Commit(ctx, req.(*CommitMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotstuff_Decide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecideMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotstuffServer).Decide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hotstuff_Decide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotstuffServer).Decide(ctx, req.(*DecideMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotstuff_NewView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewViewMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotstuffServer).NewView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hotstuff_NewView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotstuffServer).NewView(ctx, req.(*NewViewMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotstuff_Timeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeoutMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotstuffServer).Timeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hotstuff_Timeout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotstuffServer).Timeout(ctx, req.(*TimeoutMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotstuff_Debug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotstuffServer).Debug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hotstuff_Debug_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotstuffServer).Debug(ctx, req.(*DebugMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// Hotstuff_ServiceDesc is the grpc.ServiceDesc for Hotstuff service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hotstuff_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.hotstuff",
	HandlerType: (*HotstuffServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Propose",
			Handler:    _Hotstuff_Propose_Handler,
		},
		{
			MethodName: "VotePrepare",
			Handler:    _Hotstuff_VotePrepare_Handler,
		},
		{
			MethodName: "VotePreCommit",
			Handler:    _Hotstuff_VotePreCommit_Handler,
		},
		{
			MethodName: "VoteCommit",
			Handler:    _Hotstuff_VoteCommit_Handler,
		},
		{
			MethodName: "PreCommit",
			Handler:    _Hotstuff_PreCommit_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Hotstuff_Commit_Handler,
		},
		{
			MethodName: "Decide",
			Handler:    _Hotstuff_Decide_Handler,
		},
		{
			MethodName: "NewView",
			Handler:    _Hotstuff_NewView_Handler,
		},
		{
			MethodName: "Timeout",
			Handler:    _Hotstuff_Timeout_Handler,
		},
		{
			MethodName: "Debug",
			Handler:    _Hotstuff_Debug_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hotstuff/pb/proto/hostuff.proto",
}

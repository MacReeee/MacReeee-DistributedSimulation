syntax="proto3";
option go_package="./pb";
package pb;

import "google/protobuf/empty.proto";
import "hotstuff/pb/proto/enums.proto";

service hotstuff {
    rpc Propose(Proposal) returns (VoteRequest);
    rpc VotePrepare(VoteRequest) returns (Precommit);
    rpc VotePreCommit(VoteRequest) returns (CommitMsg);
    rpc VoteCommit(VoteRequest) returns (DecideMsg);
    rpc PreCommit(Precommit) returns (VoteRequest);
    rpc Commit(CommitMsg) returns (VoteRequest);
    rpc Decide(DecideMsg) returns (NewViewMsg);
    rpc NewView(NewViewMsg) returns (Proposal);

    rpc Timeout(TimeoutMsg) returns (google.protobuf.Empty);
    // rpc Sync(SyncRequest) returns (SyncResponse);
    rpc Debug(DebugMsg) returns (google.protobuf.Empty);
}

message DebugMsg {
    int64 num = 1;
}

message Proposal{
    Block block = 1;
    QC qc = 2;
    optional aggQC aggqc = 3;

    int64 proposal_id = 4;// 提案的唯一标识符
    int32 proposer = 5;    // 提案者的标识
    int64 view_number = 6; // 视图编号
    bytes signature = 8;    // 提案的数字签名
    int64 timestamp = 9;    // 时间戳
    MsgType msg_type = 10;
}

message Precommit {
    int32 id = 1;
    MsgType msg_type = 2;
    int64 view_number = 3;
    QC qc =4 ;
    bytes hash = 6; //区块的hash
    bytes signature = 7; //直接对接收到的消息的签名进行签名
}

message CommitMsg {
    int32 id = 1;
    MsgType msg_type = 2;
    int64 view_number = 3;
    QC qc =4 ;
    bytes hash = 6; //区块的hash
    bytes signature = 7; //直接对接收到的消息的签名进行签名
}

message DecideMsg {
    int32 id = 1;
    MsgType msg_type = 2;
    int64 view_number = 3;
    QC qc =4 ;
    bytes hash = 6; //区块的hash
    bytes signature = 7; //直接对接收到的消息的签名进行签名
}

message NewViewMsg {
    int32 id = 1;
    MsgType msg_type = 2;
    int64 view_number = 3;
    QC qc =4 ;
    bytes signature = 7; //对QC进行签名
}

message TimeoutMsg {
    int32 id = 1;
    MsgType msg_type = 2;
    int64 view_number = 3;
    QC qc = 4;
    bytes signature = 7; //对QC进行签名
}

message Block {
    QC qc = 1;
    bytes ParentHash = 2;
    bytes Hash = 3;
    int64 Height = 4;
    bytes cmd = 5;
    int64 view_number = 6;
    int32 Proposer = 7;
    repeated string Children = 8;
}

message QC {
    bytes bls_signature = 1; //提案阶段是对区块的hash进行签名的聚合，后续阶段是对QC进行签名的聚合，即QC的QC
    bytes AggPubKey = 2;
    repeated int32 voter = 3;
    MsgType msg_type = 4;
    int64 view_number = 5;
    bytes blockHash = 6;
}

message aggQC {
    repeated QC qcs = 1;
    bytes bls_signature = 2;
    MsgType msg_type = 3;
    int64 view_number = 4;
    bytes blockHash = 5;
}

message VoteRequest {
    int64 proposal_id = 1;
    int64 view_number = 2;
    int32 voter = 3;
    bytes signature = 4; //直接对接收到的消息的签名进行签名
    bytes hash = 5;
    MsgType msg_type = 6;
}